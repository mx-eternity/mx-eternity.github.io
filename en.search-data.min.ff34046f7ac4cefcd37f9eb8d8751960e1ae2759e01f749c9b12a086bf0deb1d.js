'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/developer/','title':"Developer Docs",'section':"Docs",'content':"Developer Docs\r#\r\rTable of Contents\r#\r\r Getting Started Plugin Config Reference  "});index.add({'id':1,'href':'/docs/user/','title':"User Docs",'section':"Docs",'content':"User Docs\r#\r\rTable of Contents\r#\r\r Getting Started Config Reference Flow Reference  "});index.add({'id':2,'href':'/docs/developer/getting_started/quickstart/','title':"Quickstart",'section':"Get Started Overview",'content':"Quick Start\r#\r\rExample Plugin\r#\r\rlib.rs\n#![no_main] // Define the functions from the framework which allow access to sending messages extern \u0026#34;C\u0026#34; { fn send_message( content_ptr: *const u8, content_len: usize, room_id_ptr: *const u8, room_id_len: usize, ); } // Export a function named \u0026#34;main_plugin\u0026#34;. This can be called // from the framework! #[no_mangle] pub extern \u0026#34;C\u0026#34; fn main_plugin() { println!(\u0026#34;called main_plugin\u0026#34;); // Call the function we just imported and pass in  // the offset of our string and its length as parameters.  let content = \u0026#34;{\\\u0026#34;type\\\u0026#34;: \\\u0026#34;m.room.message\\\u0026#34;,\\\u0026#34;content\\\u0026#34;: {\\\u0026#34;msgtype\\\u0026#34;: \\\u0026#34;m.text\\\u0026#34;,\\\u0026#34;body\\\u0026#34;: \\\u0026#34;test\\\u0026#34;}}\u0026#34;; let room_id = \u0026#34;!KwXDovBFhYakswlOwN:nordgedanken.dev\u0026#34;; unsafe { send_message( content.as_ptr(), content.len(), room_id.as_ptr(), room_id.len(), ); } } TODO\nFurther decide what format we use to transfer the message from plugins back to the framework. (Can we serialize stuff using ruma?)\r\r"});index.add({'id':3,'href':'/docs/developer/plugin_config_reference/','title':"Plugin Config Reference",'section':"Developer Docs",'content':"Plugin Config File Reference\r#\r\rThe plugin file is defined in yaml. Below is a example file. The table explains what each variable does.\nExample Flow\r#\r\rname: gitlab_plugin version: 0.1.0 exported_functions: - get_issues - name: add_issue args: - repo - title - text has_help: true license: AGPL-3.0-or-later depndencies: [] TODO: plan Database managment\nReference\r#\r\rRoot\r#\r\r   Key Description     name An identifier to use with the dependency array in other plugins   version A semver version of the plugin to identify the version (In the future might make migrations possible)   exported_functions A list of functions that can be used inside of flows. This is needed as we cant detect the exported functions from the wasm blob. See: Functions for the extended version   has_help Indicated if the there is a plugin_help function available that generates a helptext.   license The license identifier of the plugin   depndencies A list of other plugins that are required to be run first. It takes the name of the plugin as a string    Functions\r#\r\rThis extended format is required if the functions takes arguments and therefor needs to be handled different. It also indicates in what order these arguments should be input by the user.\nTODO\nThis is up for discussion as it might be intersting to define what kind of arguments these are (message args, stuff from a dependency, db values, other stuff). Also information if it is optional should be taken in account.\r\r   Key Description     name The exact name of the function   args A list of possible arguments in the function to be sent by a user    "});index.add({'id':4,'href':'/docs/user/config_reference/','title':"Config Reference",'section':"User Docs",'content':"Config File Reference\r#\r\rThe config file is defined in yaml. Below is a example file. The table explains what each variable does.\nExample Config\r#\r\rplugins_path: \u0026#34;./plugins\u0026#34; send_crashreports: true matrix: username: \u0026#34;@bot:example.com\u0026#34; access_token: \u0026#34;\u0026#34; homeserver_url: \u0026#34;https://example.com\u0026#34; store_path: \u0026#34;./store\u0026#34; Reference\r#\r\rRoot\r#\r\r   Key Description     plugins_path Path to a folder which contains the plugin wasm files   send_crashreports Set this to true if you allow crashreports being sent to sentry (Default false)   matrix See Matrix    Matrix\r#\r\r   Key Description     username The Matrix ID of the bot User   access_token The Matrix access token for the above bot user which allows to talk to the Homeserver   homeserver_url The URL of the Homeserver where the Bot user is at. This is often the url after the colon or that url with a matrix. subdomain in front. It must contain https:// in front of it   store_path This is where the synced data of that user gets cached too. This allows us to not produce the same output twice    "});index.add({'id':5,'href':'/docs/user/flow_reference/','title':"Flow Reference",'section':"User Docs",'content':"Flow File Reference\r#\r\rThe flow file is defined in yaml. Below is a example file. The table explains what each variable does.\nExample Flow\r#\r\rTODO Reference\r#\r\rRoot\r#\r\r   Key Description     TODO TODO    "});index.add({'id':6,'href':'/docs/user/getting_started/quickstart/','title':"Quickstart",'section':"Get Started Overview",'content':"Quick Start\r#\r\rStep 1: Install mx-eternity\r#\r\rStep 1.1: Install Rust\r#\r\rcurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nFor other systems check out https://rustup.rs/\nStep 1.2: Install eternity\r#\r\r git clone https://github.com/mx-eternity/mx-eternity cd eternity cargo install  Step 2: Setup the folder structure\r#\r\rThis step is currently required to be done manually. In the future there will be a cli sub command to generate the folder structure and a example configuration.\n│── plugins\r│ │\r│ └── # Contains all plugins. Usually a folder containing a plugin config and a wasm file.\r│── config.yml # The general config to configure eternity\r│── state # The folder where the state gets stored into. This might get autogenerated but you should create it first to be on the save side.\rEternity will try to load all plugins in the plugins folder. Currently the only way to deactivate them is to move them to another folder\nStep 3: Fill the configuration with the essential fields\r#\r\rSee also the Config Reference\nplugins_path: \u0026#34;./plugins\u0026#34; matrix: username: \u0026#34;\u0026lt;Bot MXID\u0026gt;\u0026#34; access_token: \u0026#34;\u0026lt;Access Token\u0026gt;\u0026#34; homeserver_url: \u0026#34;https://\u0026lt;Homeserver domain\u0026gt;\u0026#34; store_path: \u0026#34;./store\u0026#34; Step 4: Define a simple flow\r#\r\rTODO\nStep 5: Run eternity\r#\r\rTo run eternity you simply can execute eternity. Keep in mind that all config folders that are relative are relative to the folder where eternity was started in.\n"});index.add({'id':8,'href':'/docs/developer/getting_started/','title':"Get Started Overview",'section':"Developer Docs",'content':"Get Started\r#\r\r Quickstart  "});index.add({'id':9,'href':'/docs/user/getting_started/','title':"Get Started Overview",'section':"User Docs",'content':"Get Started\r#\r\r Quickstart  "});})();