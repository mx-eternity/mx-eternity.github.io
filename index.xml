<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matrix Eternity Documentation</title>
    <link>https://mx-eternity.github.io/</link>
    <description>Recent content on Matrix Eternity Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://mx-eternity.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://mx-eternity.github.io/docs/developer/getting_started/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mx-eternity.github.io/docs/developer/getting_started/quickstart/</guid>
      <description>Quick Start#</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mx-eternity.github.io/docs/developer/plugin_config_reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mx-eternity.github.io/docs/developer/plugin_config_reference/</guid>
      <description>Plugin Config File Reference#The plugin file is defined in yaml. Below is a example file. The table explains what each variable does.
Example Flow#name: gitlab_plugin version: 0.1.0 exported_functions: - get_issues - name: add_issue args: - repo - title - text has_help: true license: AGPL-3.0-or-later depndencies: [] TODO: plan Database managment
Reference#Root#   Key Description     name An identifier to use with the dependency array in other plugins   version A semver version of the plugin to identify the version (In the future might make migrations possible)   exported_functions A list of functions that can be used inside of flows.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mx-eternity.github.io/docs/user/config_reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mx-eternity.github.io/docs/user/config_reference/</guid>
      <description>Config File Reference#The config file is defined in yaml. Below is a example file. The table explains what each variable does.
Example Config#plugins_path: &amp;#34;./plugins&amp;#34; send_crashreports: true matrix: username: &amp;#34;@bot:example.com&amp;#34; access_token: &amp;#34;&amp;#34; homeserver_url: &amp;#34;https://example.com&amp;#34; store_path: &amp;#34;./store&amp;#34; Reference#Root#   Key Description     plugins_path Path to a folder which contains the plugin wasm files   send_crashreports Set this to true if you allow crashreports being sent to sentry (Default false)   matrix See Matrix    Matrix#   Key Description     username The Matrix ID of the bot User   access_token The Matrix access token for the above bot user which allows to talk to the Homeserver   homeserver_url The URL of the Homeserver where the Bot user is at.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mx-eternity.github.io/docs/user/flow_reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mx-eternity.github.io/docs/user/flow_reference/</guid>
      <description>Flow File Reference#The flow file is defined in yaml. Below is a example file. The table explains what each variable does.
Example Flow#TODO Reference#Root#   Key Description     TODO TODO    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://mx-eternity.github.io/docs/user/getting_started/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mx-eternity.github.io/docs/user/getting_started/quickstart/</guid>
      <description>Quick Start#Step 1: Install mx-eternity#Step 1.1: Install Rust#curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh
For other systems check out https://rustup.rs/
Step 1.2: Install eternity# git clone https://github.com/mx-eternity/mx-eternity cd eternity cargo install  Step 2: Setup the folder structure#This step is currently required to be done manually. In the future there will be a cli sub command to generate the folder structure and a example configuration.</description>
    </item>
    
  </channel>
</rss>