'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/developer/','title':"Developer Docs",'section':"Docs",'content':"Developer Docs\r#\r\rTable of Contents\r#\r\r Getting Started  "});index.add({'id':1,'href':'/docs/user/','title':"User Docs",'section':"Docs",'content':"User Docs\r#\r\rTable of Contents\r#\r\r Getting Started Config Reference  "});index.add({'id':2,'href':'/docs/developer/getting_started/quickstart/','title':"Quickstart",'section':"Get Started Overview",'content':"Quick Start\r#\r\r"});index.add({'id':3,'href':'/docs/user/config_reference/','title':"Config Reference",'section':"User Docs",'content':"Config File Reference\r#\r\rThe config file is defined in yaml. Below is a example file. The table explains what each variable does.\nExample Config\r#\r\rplugins_path: \u0026#34;./plugins\u0026#34; matrix: username: \u0026#34;@bot:example.com\u0026#34; access_token: \u0026#34;\u0026#34; homeserver_url: \u0026#34;https://example.com\u0026#34; store_path: \u0026#34;./store\u0026#34; Reference\r#\r\rRoot\r#\r\r   Key Description     plugins_path Path to a folder which contains the plugin wasm files   matrix See Matrix    Matrix\r#\r\r   Key Description     username The Matrix ID of the bot User   access_token The Matrix access token for the above bot user which allows to talk to the Homeserver   homeserver_url The URL of the Homeserver where the Bot user is at. This is often the url after the colon or that url with a matrix. subdomain in front. It must contain https:// in front of it   store_path This is where the synced data of that user gets cached too. This allows us to not produce the same output twice    "});index.add({'id':4,'href':'/docs/user/getting_started/quickstart/','title':"Quickstart",'section':"Get Started Overview",'content':"Quick Start\r#\r\rStep 1: Install mx-eternity\r#\r\rStep 1.1: Install Rust\r#\r\rcurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nFor other systems check out https://rustup.rs/\nStep 1.2: Install eternity\r#\r\r git clone https://github.com/mx-eternity/mx-eternity cd eternity cargo install  Step 2: Setup the folder structure\r#\r\rThis step is currently required to be done manually. In the future there will be a cli sub command to generate the folder structure and a example configuration.\n│── plugins\r│ │\r│ └── # Contains all plugins. Usually a folder containing a plugin config and a wasm file.\r│── config.yml # The general config to configure eternity\r│── state # The folder where the state gets stored into. This might get autogenerated but you should create it first to be on the save side.\rEternity will try to load all plugins in the plugins folder. Currently the only way to deactivate them is to move them to another folder\nStep 3: Fill the configuration with the essential fields\r#\r\rSee also the Config Reference\nplugins_path: \u0026#34;./plugins\u0026#34; matrix: username: \u0026#34;\u0026lt;Bot MXID\u0026gt;\u0026#34; access_token: \u0026#34;\u0026lt;Access Token\u0026gt;\u0026#34; homeserver_url: \u0026#34;https://\u0026lt;Homeserver domain\u0026gt;\u0026#34; store_path: \u0026#34;./store\u0026#34; Step 4: Define a simple flow\r#\r\rTODO\nStep 5: Run eternity\r#\r\rTo run eternity you simply can execute eternity. Keep in mind that all config folders that are relative are relative to the folder where eternity was started in.\n"});index.add({'id':6,'href':'/docs/developer/getting_started/','title':"Get Started Overview",'section':"Developer Docs",'content':"Get Started\r#\r\r Quickstart  "});index.add({'id':7,'href':'/docs/user/getting_started/','title':"Get Started Overview",'section':"User Docs",'content':"Get Started\r#\r\r Quickstart  "});})();